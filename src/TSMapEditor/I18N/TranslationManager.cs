using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;

namespace TSMapEditor.I18N
{
    /// <summary>
    /// Manages translation loading and language switching.
    /// </summary>
    public static class TranslationManager
    {
        private static bool _initialized = false;
        private static readonly string TranslationsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Translations");
        private static CultureInfo _initialUICulture;

        /// <summary>
        /// The UI culture that the application was started with.
        /// </summary>
        public static CultureInfo InitialUICulture
        {
            get => _initialUICulture;
            set => _initialUICulture = _initialUICulture is null ? value
                : throw new InvalidOperationException($"{nameof(InitialUICulture)} is already set!");
        }

        /// <summary>
        /// Initializes the translation system.
        /// </summary>
        public static void Initialize()
        {
            if (_initialized)
                return;

            _initialized = true;

            if (_initialUICulture == null)
                _initialUICulture = CultureInfo.CurrentUICulture;

            // Load default translation
            string defaultLocaleCode = GetDefaultTranslationLocaleCode();
            LoadTranslationByLocaleCode(defaultLocaleCode);

            // Register translation strings
            try
            {
                // Generated by TranslationNotifierGenerator
                var generatedType = Type.GetType("TSMapEditor.Generated.TranslationNotifier");
                if (generatedType != null)
                {
                    var registerMethod = generatedType.GetMethod("Register");
                    registerMethod?.Invoke(null, null);
                }
            }
            catch (Exception ex)
            {
                // Log error but don't crash the application
                System.Diagnostics.Debug.WriteLine($"Failed to register translation strings: {ex.Message}");
            }
        }

        /// <summary>
        /// Gets all available translations.
        /// </summary>
        /// <returns>Dictionary of locale code to display name pairs.</returns>
        public static Dictionary<string, string> GetAvailableTranslations()
        {
            var translations = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase)
            {
                // Add default localization so that we always have it in the list even if the localization does not exist
                ["en"] = GetLanguageName("en")
            };

            if (!Directory.Exists(TranslationsPath))
                return translations;

            foreach (var localizationFolder in Directory.GetDirectories(TranslationsPath))
            {
                string localizationCode = Path.GetFileName(localizationFolder);
                if (File.Exists(Path.Combine(localizationFolder, "Translation.ini")))
                {
                    translations[localizationCode] = GetLanguageName(localizationCode);
                }
            }

            return translations;
        }

        /// <summary>
        /// Gets the best matching translation for the current UI culture.
        /// </summary>
        /// <returns>Translation locale code.</returns>
        public static string GetDefaultTranslationLocaleCode()
        {
            Dictionary<string, string> translations = GetAvailableTranslations();

            for (var culture = InitialUICulture ?? CultureInfo.CurrentUICulture;
                culture != CultureInfo.InvariantCulture;
                culture = culture.Parent)
            {
                string translation = culture.Name;

                // the keys in 'translations' are case-insensitive
                if (translations.ContainsKey(translation))
                    return translation;
            }

            return "en"; // Default fallback
        }

        /// <summary>
        /// Gets the display name for a language code.
        /// </summary>
        /// <param name="localeCode">The locale code.</param>
        /// <returns>The display name of the language.</returns>
        private static string GetLanguageName(string localeCode)
        {
            try
            {
                var culture = new CultureInfo(localeCode);
                return culture.DisplayName;
            }
            catch
            {
                return localeCode; // Fallback to the code itself
            }
        }

        /// <summary>
        /// Loads translation by locale code.
        /// </summary>
        /// <param name="localeCode">The locale code to load.</param>
        public static void LoadTranslationByLocaleCode(string localeCode)
        {
            if (string.IsNullOrEmpty(localeCode))
                return;

            var translationFile = Path.Combine(TranslationsPath, localeCode, "Translation.ini");
            if (File.Exists(translationFile))
            {
                Translation.Instance.LoadFromFile(translationFile);
                return;
            }

            // Fallback to English or keep default
            translationFile = Path.Combine(TranslationsPath, "en", "Translation.ini");
            if (File.Exists(translationFile))
            {
                Translation.Instance.LoadFromFile(translationFile);
            }
        }

        /// <summary>
        /// Loads translation for the specified culture.
        /// </summary>
        /// <param name="culture">The culture to load translation for.</param>
        public static void LoadTranslationForCulture(CultureInfo culture)
        {
            if (culture == null)
                return;

            LoadTranslationByLocaleCode(culture.Name);
        }

        /// <summary>
        /// Gets all available translation languages.
        /// </summary>
        /// <returns>Array of available language codes.</returns>
        public static string[] GetAvailableLanguages()
        {
            return GetAvailableTranslations().Keys.ToArray();
        }

        /// <summary>
        /// Switches to the specified language.
        /// </summary>
        /// <param name="languageCode">The language code (e.g., "zh-CN", "en").</param>
        public static void SwitchLanguage(string languageCode)
        {
            if (string.IsNullOrEmpty(languageCode))
                return;

            try
            {
                var culture = new CultureInfo(languageCode);
                Translation.Instance.Clear();
                LoadTranslationForCulture(culture);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to switch to language {languageCode}: {ex.Message}");
            }
        }

        /// <summary>
        /// Exports missing translation strings to a file.
        /// </summary>
        /// <param name="filePath">The file path to export to.</param>
        public static void ExportMissingTranslations(string filePath = null)
        {
            if (string.IsNullOrEmpty(filePath))
            {
                filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "MissingTranslations.ini");
            }

            Translation.Instance.ExportMissingTranslations(filePath);
        }
    }
}